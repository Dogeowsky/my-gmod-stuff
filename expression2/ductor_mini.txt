@name Ductor Mini v0.2.1
@inputs EGP:wirelink
@persist Plys:array

function createPlyNode(I:number, Ply:entity) {
    local EIndex = I + maxPlayers()
    
    if(EGP) {
        EGP:egp3DTracker(I, vec())
        EGP:egpParent(I, Ply)
        
        EGP:egpText(EIndex, Ply:name(), vec2(0))
        EGP:egpColor(EIndex, teamColor(Ply:team()))
        EGP:egpAlign(EIndex, 1)
        EGP:egpParent(EIndex, I)
    }
}

function removePlyNode(I:number) {
    local EIndex = I + maxPlayers()
    
    if(EGP) {
        EGP:egpRemove(I)
        EGP:egpRemove(EIndex) 
    }
}

if(first()) {
    DEBUG = 1 # debug mode
        
    Plys = array()
    if(EGP) {
        EGP:egpClear()   
    }
    else {
        print("Link your EGP and reset the chip!")   
    }
    
    foreach(_:number, Ply:entity = players()) {
        if(Ply != owner()) {
            Plys:pushEntity(Ply)
            
            createPlyNode(Plys:count(), Ply)
            
            if(DEBUG) {
                print(Ply)
            }            
        }
    }
}

event playerConnected(ConnectedPly:entity) {
    timer("awaitPlayerInit", 0.2, function() {
        Plys:pushEntity(ConnectedPly)
        
        createPlyNode(Plys:count(), ConnectedPly)
        
        if(DEBUG) {
            print(ConnectedPly:name() + "has joined the server.")   
        }  
    })  
}

event playerDisconnected(DisconnectedPly:entity) {
    foreach(Key:number, Ply:entity = Plys) {
        if(DisconnectedPly == Ply) {
            Plys:remove(Key)
            
            removePlyNode(Key)
            
            if(DEBUG) {
                print(DisconnectedPly:name() + "has left the server.")   
            }
        }   
    }
}
